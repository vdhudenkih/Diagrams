public static class WordModifier
{
    public static void ModifyWords(List<Word> words)
    {
        var prepositions = new[] { "для", "от", "из", "к", "с", "в", "на", "под", "через" };
        var specialNouns = new[] { "набор", "комплект", "каталог", "блок" };
        
        // Find first preposition and its index
        int prepIndex = words.FindIndex(w => prepositions.Contains(w.wordText));
        bool hasPreposition = prepIndex != -1;
        
        // Find noun and adjective counts
        bool hasNoun = words.Any(w => w.partOfSpeech == "NOUN");
        bool hasAdjective = words.Any(w => w.partOfSpeech == "ADJF");
        bool isSpecialFirstNoun = words.Any(w => w.wordOrder == 0 && specialNouns.Contains(w.wordText));

        if (!hasPreposition)
        {
            ProcessWordList(words, hasNoun, hasAdjective, isSpecialFirstNoun);
        }
        else
        {
            // Process words before preposition
            var wordsBeforePrep = words.Take(prepIndex).ToList();
            ProcessWordList(wordsBeforePrep, 
                wordsBeforePrep.Any(w => w.partOfSpeech == "NOUN"),
                wordsBeforePrep.Any(w => w.partOfSpeech == "ADJF"),
                wordsBeforePrep.Any(w => w.wordOrder == 0 && specialNouns.Contains(w.wordText)));

            // Process words after preposition
            var wordsAfterPrep = words.Skip(prepIndex + 1).ToList();
            var prepWord = words[prepIndex].wordText;

            if (new[] { "для", "от", "из" }.Contains(prepWord))
            {
                foreach (var word in wordsAfterPrep)
                {
                    word.wordCase = "gent";
                }
            }
            else if (new[] { "на", "под", "через" }.Contains(prepWord))
            {
                foreach (var word in wordsAfterPrep)
                {
                    word.wordCase = "accs";
                }
            }
            else if (prepWord == "в")
            {
                foreach (var word in wordsAfterPrep)
                {
                    word.wordCase = "loct";
                }
            }
            else if (prepWord == "с")
            {
                foreach (var word in wordsAfterPrep)
                {
                    word.wordCase = "ablt";
                }
            }
            else if (prepWord == "к")
            {
                foreach (var word in wordsAfterPrep)
                {
                    word.wordCase = "datv";
                }
            }
        }
    }

    private static void ProcessWordList(List<Word> words, bool hasNoun, bool hasAdjective, bool isSpecialFirstNoun)
    {
        if (!hasNoun) return;

        var firstNoun = words.FirstOrDefault(w => w.partOfSpeech == "NOUN");
        
        if (!hasAdjective)
        {
            if (!isSpecialFirstNoun)
            {
                foreach (var word in words.Where(w => w.wordOrder != 0))
                {
                    word.wordCase = "gent";
                }
            }
            else
            {
                foreach (var word in words.Where(w => w.wordOrder != 0))
                {
                    word.wordKind = "masc";
                    word.wordCase = "gent";
                    word.singPlur = "plur";
                }
            }
        }
        else
        {
            if (isSpecialFirstNoun)
            {
                foreach (var word in words.Where(w => w.wordOrder != 0))
                {
                    word.wordKind = "masc";
                    word.wordCase = "gent";
                    word.singPlur = "plur";
                }
            }
            else
            {
                var firstWord = words.FirstOrDefault(w => w.wordOrder == 0);
                if (firstWord != null)
                {
                    foreach (var word in words.Where(w => w.wordOrder != 0))
                    {
                        word.wordKind = firstWord.wordKind;
                        word.wordCase = "gent";
                        word.singPlur = firstWord.singPlur;
                    }
                }
            }
        }

        // Handle adjectives when only one noun exists
        if (hasNoun && words.Count(w => w.partOfSpeech == "NOUN") == 1)
        {
            foreach (var word in words.Where(w => w.partOfSpeech == "ADJF"))
            {
                word.wordKind = firstNoun.wordKind;
                word.wordCase = firstNoun.wordCase;
            }
        }
    }
}

public class Word
{
    public int wordOrder;
    public string wordText;
    public string wordId;
    public string partOfSpeech;
    public string wordKind;
    public string singPlur;
    public string wordCase;
}




public class Word
{
    public int wordOrder { get; set; }
    public string wordText { get; set; }
    public string wordId { get; set; }
    public string partOfSpeech { get; set; }
    public string wordKind { get; set; }
    public string singPlur { get; set; }
    public string wordCase { get; set; }
}

public void ModifyWords(List<Word> words)
{
    var prepositions = new[] { "для", "от", "из", "к", "с", "в", "на", "под", "через" };
    var specialNouns = new[] { "набор", "комплект", "каталог", "блок" };
    
    // Find first preposition if any
    int prepIndex = words.FindIndex(w => prepositions.Contains(w.wordText));
    
    // Check if any noun exists
    var hasNoun = words.Any(w => w.partOfSpeech == "NOUN");
    
    if (!hasNoun) return; // No nouns, no changes needed
    
    if (prepIndex == -1) // No preposition found
    {
        ProcessWordList(words, specialNouns);
    }
    else
    {
        // Process words before preposition
        var beforePrep = words.Take(prepIndex).ToList();
        ProcessWordList(beforePrep, specialNouns);
        
        // Update original list with processed words before preposition
        for (int i = 0; i < beforePrep.Count; i++)
        {
            words[i] = beforePrep[i];
        }
        
        // Process words after preposition
        var prepWord = words[prepIndex];
        for (int i = prepIndex + 1; i < words.Count; i++)
        {
            if (new[] { "для", "от", "из" }.Contains(prepWord.wordText))
                words[i].wordCase = "gent";
            else if (new[] { "на", "под", "через" }.Contains(prepWord.wordText))
                words[i].wordCase = "accs";
            else if (prepWord.wordText == "в")
                words[i].wordCase = "loct";
            else if (prepWord.wordText == "с")
                words[i].wordCase = "ablt";
            else if (prepWord.wordText == "к")
                words[i].wordCase = "datv";
        }
    }
}

private void ProcessWordList(List<Word> words, string[] specialNouns)
{
    var firstWord = words.FirstOrDefault(w => w.wordOrder == 0);
    var nounCount = words.Count(w => w.partOfSpeech == "NOUN");
    var hasAdjf = words.Any(w => w.partOfSpeech == "ADJF");
    
    if (nounCount == 1)
    {
        var noun = words.First(w => w.partOfSpeech == "NOUN");
        foreach (var word in words.Where(w => w.partOfSpeech == "ADJF"))
        {
            word.wordKind = noun.wordKind;
            word.wordCase = noun.wordCase;
        }
    }
    else
    {
        if (!hasAdjf)
        {
            bool isSpecialNoun = firstWord != null && specialNouns.Contains(firstWord.wordText);
            foreach (var word in words.Where(w => w.wordOrder != 0))
            {
                if (isSpecialNoun)
                {
                    word.wordKind = "masc";
                    word.wordCase = "gent";
                    word.singPlur = "plur";
                }
                else
                {
                    word.wordCase = "gent";
                }
            }
        }
        else
        {
            bool isSpecialNoun = firstWord != null && specialNouns.Contains(firstWord.wordText);
            foreach (var word in words.Where(w => w.wordOrder != 0))
            {
                if (isSpecialNoun)
                {
                    word.wordKind = "masc";
                    word.wordCase = "gent";
                    word.singPlur = "plur";
                }
                else
                {
                    word.wordKind = firstWord.wordKind;
                    word.wordCase = "gent";
                    word.singPlur = firstWord.singPlur;
                }
            }
        }
    }
}


напиши функцию с названием ModifyWords на ЯП c# по следующему условию:
на вход подаётся List<Word> words
программа считывает все объекты класса Word с параметрами:
public int wordOrder;
public string wordText;
public string wordId;
public string partOfSpeech;
public string wordKind;
public string singPlur;
public string wordCase;
типичным объектом будет, например "0, кошка, 1000, NOUN, femn, nomn"
Тебе нужно изменить параметры объектов по следующей логике:
Если параметр одного объекта partOfSpeech=NOUN и нет объекта где (wordText="для" или "от" или "из" или "к" или "с" или "в" или "на" или "под" или "через")
то:{
    если нет других объектов с параметром partOfSpeech=NOUN 
    то:{
        изменить (параметры wordKind и wordCase на равные аналогичным у объекта с параметром NOUN) у всех объектов, где параметр partOfSpeech=ADJF 
        }
    иначе:
        {
        Если нет объектов с параметром ADJF:
        то:
            {
                если не (объект с параметром wordOrder==0 имеет параметр wordText= "набор" или "комплект" или "каталог" или "блок")
                то:{
                    изменить параметры wordCase всех объектов, кроме объекта с параметром wordOrder==0, на wordCase="gent"
                    }
                иначе:
                    {
                    изменить параметры (wordKind и wordCase и singPlur всех объектов, кроме объекта с параметром wordOrder==0), на (wordKind="masc" и wordCase="gent" и singPlur="plur")
                    }
            }
        Иначе:
        {
            если (объект с параметром wordOrder==0 имеет параметр wordText= "набор" или "комплект" или "каталог" или "блок")
            то:
            {
                изменить параметры (wordKind и wordCase и singPlur всех объектов, кроме объекта с параметром wordOrder==0), на  wordKind="masc" и wordCase="gent" и singPlur="plur"
            }
            иначе:
            {
                изменить параметры (wordKind и wordCase и singPlur всех объектов, кроме объекта с параметром wordOrder==0), на  равные объекту с параметром wordOrder==0
                изменить параметр (wordCase всех объектов, кроме объекта с параметром wordOrder==0), на wordCase="gent"
            }
        }
        }
}
иначе:
{
    для всех объектов ДО обьекта с параметром (wordText="для" или "от" или "из" или "к" или "с" или "в" или "на" или "под" или "через") выполнить:
    {
    если нет других объектов с параметром partOfSpeech=NOUN 
        то:{
            изменить (параметры wordKind и wordCase на равные аналогичным у объекта с параметром NOUN) у всех объектов, где параметр partOfSpeech=ADJF 
            }
        иначе:
            {
            Если нет объектов с параметром ADJF:
            то:
                {
                    если не (объект с параметром wordOrder==0 имеет параметр wordText= "набор" или "комплект" или "каталог" или "блок")
                    то:{
                        изменить параметры wordCase всех объектов, кроме объекта с параметром wordOrder==0, на wordCase="gent"
                        }
                    иначе:
                        {
                        изменить параметры (wordKind и wordCase и singPlur всех объектов, кроме объекта с параметром wordOrder==0), на (wordKind="masc" и wordCase="gent" и singPlur="plur")
                        }
                }
            Иначе:
            {
                если (объект с параметром wordOrder==0 имеет параметр wordText= "набор" или "комплект" или "каталог" или "блок")
                то:
                {
                    изменить параметры (wordKind и wordCase и singPlur всех объектов, кроме объекта с параметром wordOrder==0), на  wordKind="masc" и wordCase="gent" и singPlur="plur"
                }
                иначе:
                {
                    изменить параметры (wordKind и wordCase и singPlur всех объектов, кроме объекта с параметром wordOrder==0), на  равные объекту с параметром wordOrder==0
                    изменить параметр (wordCase всех объектов, кроме объекта с параметром wordOrder==0), на wordCase="gent"
                }
            }
        }
    }
    для всех объектов ПОСЛЕ обьекта с параметром (wordText="для" или "от" или "из" или "к" или "с" или "в" или "на" или "под" или "через") выполнить:
    {
        Если найден объект с параметром (wordText="для" или "от" или "из")
        {
            Изменить параметры (wordCase на wordCase="gent") всех объектов, следующих после объекта с параметром (wordText="для" или "от" или "из")
        }
        Иначе если найден объект с параметром (wordText="на" или "под" или "через")
        {
            Изменить параметры (wordCase на wordCase="accs") всех объектов, следующих после объекта с параметром (wordText="на" или "под" или "через")
        }
        Иначе если найден объект с параметром (wordText="в")
        {
            Изменить параметры (wordCase на wordCase="loct") всех объектов, следующих после объекта с параметром (wordText="в")
        }
        Иначе если найден объект с параметром (wordText="с")
        {
            Изменить параметры (wordCase на wordCase="ablt") всех объектов, следующих после объекта с параметром (wordText="с")
        }
        Иначе если найден объект с параметром (wordText="к")
        {
            Изменить параметры (wordCase на wordCase="datv") всех объектов, следующих после объекта с параметром (wordText="к")
        }
    }
}

