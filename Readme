напиши функцию с названием LemmaPropertySearch на ЯП c# по следующему условию:
на вход подается строка, вот несколько примеров:
первая строка-пример:
<lemma id="142031" rev="142031"><l t="красота"><g v="NOUN"/><g v="inan"/><g v="femn"/></l><f t="красота"><g v="sing"/><g v="nomn"/></f><f t="красоты"><g v="sing"/><g v="gent"/></f><f t="красоте"><g v="sing"/><g v="datv"/></f><f t="красоту"><g v="sing"/><g v="accs"/></f><f t="красотой"><g v="sing"/><g v="ablt"/></f><f t="красотою"><g v="sing"/><g v="ablt"/><g v="V-oy"/></f><f t="красоте"><g v="sing"/><g v="loct"/></f><f t="красоты"><g v="plur"/><g v="nomn"/></f><f t="красот"><g v="plur"/><g v="gent"/></f><f t="красотам"><g v="plur"/><g v="datv"/></f><f t="красоты"><g v="plur"/><g v="accs"/></f><f t="красотами"><g v="plur"/><g v="ablt"/></f><f t="красотах"><g v="plur"/><g v="loct"/></f></lemma>
вторая строка-пример:
<lemma id="141888" rev="141888"><l t="красноломкий"><g v="ADJF"/></l><f t="красноломкий"><g v="masc"/><g v="sing"/><g v="nomn"/></f><f t="красноломкого"><g v="masc"/><g v="sing"/><g v="gent"/></f><f t="красноломкому"><g v="masc"/><g v="sing"/><g v="datv"/></f><f t="красноломкого"><g v="anim"/><g v="masc"/><g v="sing"/><g v="accs"/></f><f t="красноломкий"><g v="inan"/><g v="masc"/><g v="sing"/><g v="accs"/></f><f t="красноломким"><g v="masc"/><g v="sing"/><g v="ablt"/></f><f t="красноломком"><g v="masc"/><g v="sing"/><g v="loct"/></f><f t="красноломкая"><g v="femn"/><g v="sing"/><g v="nomn"/></f><f t="красноломкой"><g v="femn"/><g v="sing"/><g v="gent"/></f><f t="красноломкой"><g v="femn"/><g v="sing"/><g v="datv"/></f><f t="красноломкую"><g v="femn"/><g v="sing"/><g v="accs"/></f><f t="красноломкой"><g v="femn"/><g v="sing"/><g v="ablt"/></f><f t="красноломкою"><g v="femn"/><g v="sing"/><g v="ablt"/><g v="V-oy"/></f><f t="красноломкой"><g v="femn"/><g v="sing"/><g v="loct"/></f><f t="красноломкое"><g v="neut"/><g v="sing"/><g v="nomn"/></f><f t="красноломкого"><g v="neut"/><g v="sing"/><g v="gent"/></f><f t="красноломкому"><g v="neut"/><g v="sing"/><g v="datv"/></f><f t="красноломкое"><g v="neut"/><g v="sing"/><g v="accs"/></f><f t="красноломким"><g v="neut"/><g v="sing"/><g v="ablt"/></f><f t="красноломком"><g v="neut"/><g v="sing"/><g v="loct"/></f><f t="красноломкие"><g v="plur"/><g v="nomn"/></f><f t="красноломких"><g v="plur"/><g v="gent"/></f><f t="красноломким"><g v="plur"/><g v="datv"/></f><f t="красноломких"><g v="anim"/><g v="plur"/><g v="accs"/></f><f t="красноломкие"><g v="inan"/><g v="plur"/><g v="accs"/></f><f t="красноломкими"><g v="plur"/><g v="ablt"/></f><f t="красноломких"><g v="plur"/><g v="loct"/></f></lemma>
третья строка пример:
<lemma id="142026" rev="142026"><l t="красуясь"><g v="GRND"/><g v="impf"/><g v="intr"/></l><f t="красуясь"><g v="pres"/></f><f t="красовавшись"><g v="past"/><g v="V-sh"/></f></lemma>
на выходе функция должна давать последовательность, например, для строки-примера 1: 142031-NOUN-femn-nomn
для строки-примера 2: 141888-ADJF-masc-nomn
для строки-примера 3: 142026-GRND-0000-0000






using System;
using System.Text.RegularExpressions;

public class Program
{
    public static void Main()
    {
        string input1 = "<lemma id=\"142031\" rev=\"142031\"><l t=\"красота\"><g v=\"NOUN\"/><g v=\"inan\"/><g v=\"femn\"/></l><f t=\"красота\"><g v=\"sing\"/><g v=\"nomn\"/></f>...</lemma>";
        string input2 = "<lemma id=\"141888\" rev=\"141888\"><l t=\"красноломкий\"><g v=\"ADJF\"/></l><f t=\"красноломкий\"><g v=\"masc\"/><g v=\"sing\"/><g v=\"nomn\"/></f>...</lemma>";
        string input3 = "<lemma id=\"142026\" rev=\"142026\"><l t=\"красуясь\"><g v=\"GRND\"/><g v=\"impf\"/><g v=\"intr\"/></l><f t=\"красуясь\"><g v=\"pres\"/></f>...</lemma>";

        Console.WriteLine(LemmaPropertySearch(input1));
        Console.WriteLine(LemmaPropertySearch(input2));
        Console.WriteLine(LemmaPropertySearch(input3));
    }

    public static string LemmaPropertySearch(string lemmaXml)
    {
        // Регулярные выражения для извлечения нужных данных
        var idMatch = Regex.Match(lemmaXml, @"id=""(\d+)""");
        var gMatch = Regex.Match(lemmaXml, @"<l t=""[^""]*""><g v=""([^""]+)""");
        var fMatch = Regex.Match(lemmaXml, @"<f t=""[^""]*""><g v=""([^""]+)""");

        if (idMatch.Success && gMatch.Success && fMatch.Success)
        {
            string id = idMatch.Groups[1].Value;
            string lemmaType = gMatch.Groups[1].Value;
            string gender = fMatch.Groups[1].Value;

            // Получаем дополнительные значения для вывода
            var additionalMatch = Regex.Matches(lemmaXml, @"<f t=""[^""]*""><g v=""([^""]+)""");
            string number = "0000"; // по умолчанию
            string caseValue = "0000"; // по умолчанию

            if (additionalMatch.Count > 1)
            {
                number = additionalMatch[1].Groups[1].Value; // берем второе значение
                if (additionalMatch.Count > 2)
                {
                    caseValue = additionalMatch[2].Groups[1].Value; // берем третье значение
                }
            }

            return $"{id}-{lemmaType}-{gender}-{number}-{caseValue}";
        }

        return null; // или можно вернуть строку с ошибкой
    }
}

программа дает некорректный вывод:
при вводе <lemma id="267588" rev="267588"><l t="прекрасный"><g v="ADJF"/><g v="Qual"/></l><f t="прекрасный"><g v="masc"/><g v="sing"/><g v="nomn"/></f><f t="прекрасного"><g v="masc"/><g v="sing"/><g v="gent"/></f><f t="прекрасному"><g v="masc"/><g v="sing"/><g v="datv"/></f><f t="прекрасного"><g v="anim"/><g v="masc"/><g v="sing"/><g v="accs"/></f><f t="прекрасный"><g v="inan"/><g v="masc"/><g v="sing"/><g v="accs"/></f><f t="прекрасным"><g v="masc"/><g v="sing"/><g v="ablt"/></f><f t="прекрасном"><g v="masc"/><g v="sing"/><g v="loct"/></f><f t="прекрасная"><g v="femn"/><g v="sing"/><g v="nomn"/></f><f t="прекрасной"><g v="femn"/><g v="sing"/><g v="gent"/></f><f t="прекрасной"><g v="femn"/><g v="sing"/><g v="datv"/></f><f t="прекрасную"><g v="femn"/><g v="sing"/><g v="accs"/></f><f t="прекрасной"><g v="femn"/><g v="sing"/><g v="ablt"/></f><f t="прекрасною"><g v="femn"/><g v="sing"/><g v="ablt"/><g v="V-oy"/></f><f t="прекрасной"><g v="femn"/><g v="sing"/><g v="loct"/></f><f t="прекрасное"><g v="neut"/><g v="sing"/><g v="nomn"/></f><f t="прекрасного"><g v="neut"/><g v="sing"/><g v="gent"/></f><f t="прекрасному"><g v="neut"/><g v="sing"/><g v="datv"/></f><f t="прекрасное"><g v="neut"/><g v="sing"/><g v="accs"/></f><f t="прекрасным"><g v="neut"/><g v="sing"/><g v="ablt"/></f><f t="прекрасном"><g v="neut"/><g v="sing"/><g v="loct"/></f><f t="прекрасные"><g v="plur"/><g v="nomn"/></f><f t="прекрасных"><g v="plur"/><g v="gent"/></f><f t="прекрасным"><g v="plur"/><g v="datv"/></f><f t="прекрасных"><g v="anim"/><g v="plur"/><g v="accs"/></f><f t="прекрасные"><g v="inan"/><g v="plur"/><g v="accs"/></f><f t="прекрасными"><g v="plur"/><g v="ablt"/></f><f t="прекрасных"><g v="plur"/><g v="loct"/></f></lemma>
на выход получаем 267588-ADJF-masc-masc, хотя должны 267588-ADJF-masc-nomn
