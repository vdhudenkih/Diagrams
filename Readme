using System;
using System.Collections.Generic;
using System.Linq;

public class LemmaSearcher
{
    public static string[] FindLemmasContainingWord(string[] lemmas, string word)
    {
        if (lemmas == null || word == null)
            return Array.Empty<string>();

        // Нормализуем искомое слово: приведём к нижнему регистру и заменим ё на е
        string normalizedWord = NormalizeWord(word);

        List<string> result = new List<string>();

        foreach (var lemma in lemmas)
        {
            if (string.IsNullOrEmpty(lemma))
                continue;

            // Нормализуем строку для поиска (тоже к нижнему регистру и замена ё на е)
            string normalizedLemma = NormalizeWord(lemma);

            // Проверяем, содержится ли искомое слово в строке
            if (normalizedLemma.Contains(normalizedWord))
            {
                result.Add(lemma);
            }
        }

        return result.ToArray();
    }

    private static string NormalizeWord(string input)
    {
        return input.ToLower().Replace('ё', 'е');
    }
}




напиши функцию на яп C# по следующему условию:
на вход подаётся массив строк, например:
<lemma id="40802" rev="40802"><l t="велотрек"><g v="NOUN"/><g v="inan"/><g v="masc"/></l><f t="велотрек"><g v="sing"/><g v="nomn"/></f><f t="велотрека"><g v="sing"/><g v="gent"/></f><f t="велотреку"><g v="sing"/><g v="datv"/></f><f t="велотрек"><g v="sing"/><g v="accs"/></f><f t="велотреком"><g v="sing"/><g v="ablt"/></f><f t="велотреке"><g v="sing"/><g v="loct"/></f><f t="велотреки"><g v="plur"/><g v="nomn"/></f><f t="велотреков"><g v="plur"/><g v="gent"/></f><f t="велотрекам"><g v="plur"/><g v="datv"/></f><f t="велотреки"><g v="plur"/><g v="accs"/></f><f t="велотреками"><g v="plur"/><g v="ablt"/></f><f t="велотреках"><g v="plur"/><g v="loct"/></f></lemma>
,<lemma id="40803" rev="404710"><l t="велотренажёр"><g v="NOUN"/><g v="inan"/><g v="masc"/></l><f t="велотренажёр"><g v="sing"/><g v="nomn"/></f><f t="велотренажёра"><g v="sing"/><g v="gent"/></f><f t="велотренажёру"><g v="sing"/><g v="datv"/></f><f t="велотренажёр"><g v="sing"/><g v="accs"/></f><f t="велотренажёром"><g v="sing"/><g v="ablt"/></f><f t="велотренажёре"><g v="sing"/><g v="loct"/></f><f t="велотренажёры"><g v="plur"/><g v="nomn"/></f><f t="велотренажёров"><g v="plur"/><g v="gent"/></f><f t="велотренажёрам"><g v="plur"/><g v="datv"/></f><f t="велотренажёры"><g v="plur"/><g v="accs"/></f><f t="велотренажёрами"><g v="plur"/><g v="ablt"/></f><f t="велотренажёрах"><g v="plur"/><g v="loct"/></f></lemma>
,<lemma id="40804" rev="40804"><l t="велофигурист"><g v="NOUN"/><g v="anim"/><g v="masc"/></l><f t="велофигурист"><g v="sing"/><g v="nomn"/></f><f t="велофигуриста"><g v="sing"/><g v="gent"/></f><f t="велофигуристу"><g v="sing"/><g v="datv"/></f><f t="велофигуриста"><g v="sing"/><g v="accs"/></f><f t="велофигуристом"><g v="sing"/><g v="ablt"/></f><f t="велофигуристе"><g v="sing"/><g v="loct"/></f><f t="велофигуристы"><g v="plur"/><g v="nomn"/></f><f t="велофигуристов"><g v="plur"/><g v="gent"/></f><f t="велофигуристам"><g v="plur"/><g v="datv"/></f><f t="велофигуристов"><g v="plur"/><g v="accs"/></f><f t="велофигуристами"><g v="plur"/><g v="ablt"/></f><f t="велофигуристах"><g v="plur"/><g v="loct"/></f></lemma>
,<lemma id="40805" rev="40805"><l t="велофигуристка"><g v="NOUN"/><g v="anim"/><g v="femn"/></l><f t="велофигуристка"><g v="sing"/><g v="nomn"/></f><f t="велофигуристки"><g v="sing"/><g v="gent"/></f><f t="велофигуристке"><g v="sing"/><g v="datv"/></f><f t="велофигуристку"><g v="sing"/><g v="accs"/></f><f t="велофигуристкой"><g v="sing"/><g v="ablt"/></f><f t="велофигуристкою"><g v="sing"/><g v="ablt"/><g v="V-oy"/></f><f t="велофигуристке"><g v="sing"/><g v="loct"/></f><f t="велофигуристки"><g v="plur"/><g v="nomn"/></f><f t="велофигуристок"><g v="plur"/><g v="gent"/></f><f t="велофигуристкам"><g v="plur"/><g v="datv"/></f><f t="велофигуристок"><g v="plur"/><g v="accs"/></f><f t="велофигуристками"><g v="plur"/><g v="ablt"/></f><f t="велофигуристках"><g v="plur"/><g v="loct"/></f></lemma>
,<lemma id="40806" rev="40806"><l t="велоэргометр"><g v="NOUN"/><g v="inan"/><g v="masc"/></l><f t="велоэргометр"><g v="sing"/><g v="nomn"/></f><f t="велоэргометра"><g v="sing"/><g v="gent"/></f><f t="велоэргометру"><g v="sing"/><g v="datv"/></f><f t="велоэргометр"><g v="sing"/><g v="accs"/></f><f t="велоэргометром"><g v="sing"/><g v="ablt"/></f><f t="велоэргометре"><g v="sing"/><g v="loct"/></f><f t="велоэргометры"><g v="plur"/><g v="nomn"/></f><f t="велоэргометров"><g v="plur"/><g v="gent"/></f><f t="велоэргометрам"><g v="plur"/><g v="datv"/></f><f t="велоэргометры"><g v="plur"/><g v="accs"/></f><f t="велоэргометрами"><g v="plur"/><g v="ablt"/></f><f t="велоэргометрах"><g v="plur"/><g v="loct"/></f></lemma>
,<lemma id="40807" rev="40807"><l t="велта"><g v="NOUN"/><g v="inan"/><g v="femn"/><g v="Sgtm"/><g v="Geox"/></l><f t="велта"><g v="sing"/><g v="nomn"/></f><f t="велты"><g v="sing"/><g v="gent"/></f><f t="велте"><g v="sing"/><g v="datv"/></f><f t="велту"><g v="sing"/><g v="accs"/></f><f t="велтой"><g v="sing"/><g v="ablt"/></f><f t="велтою"><g v="sing"/><g v="ablt"/><g v="V-oy"/></f><f t="велте"><g v="sing"/><g v="loct"/></f></lemma>
,<lemma id="40808" rev="40808"><l t="вельбот"><g v="NOUN"/><g v="inan"/><g v="masc"/></l><f t="вельбот"><g v="sing"/><g v="nomn"/></f><f t="вельбота"><g v="sing"/><g v="gent"/></f><f t="вельботу"><g v="sing"/><g v="datv"/></f><f t="вельбот"><g v="sing"/><g v="accs"/></f><f t="вельботом"><g v="sing"/><g v="ablt"/></f><f t="вельботе"><g v="sing"/><g v="loct"/></f><f t="вельботы"><g v="plur"/><g v="nomn"/></f><f t="вельботов"><g v="plur"/><g v="gent"/></f><f t="вельботам"><g v="plur"/><g v="datv"/></f><f t="вельботы"><g v="plur"/><g v="accs"/></f><f t="вельботами"><g v="plur"/><g v="ablt"/></f><f t="вельботах"><g v="plur"/><g v="loct"/></f></lemma>
,<lemma id="40809" rev="40809"><l t="вельботный"><g v="ADJF"/></l><f t="вельботный"><g v="masc"/><g v="sing"/><g v="nomn"/></f><f t="вельботного"><g v="masc"/><g v="sing"/><g v="gent"/></f><f t="вельботному"><g v="masc"/><g v="sing"/><g v="datv"/></f><f t="вельботного"><g v="anim"/><g v="masc"/><g v="sing"/><g v="accs"/></f><f t="вельботный"><g v="inan"/><g v="masc"/><g v="sing"/><g v="accs"/></f><f t="вельботным"><g v="masc"/><g v="sing"/><g v="ablt"/></f><f t="вельботном"><g v="masc"/><g v="sing"/><g v="loct"/></f><f t="вельботная"><g v="femn"/><g v="sing"/><g v="nomn"/></f><f t="вельботной"><g v="femn"/><g v="sing"/><g v="gent"/></f><f t="вельботной"><g v="femn"/><g v="sing"/><g v="datv"/></f><f t="вельботную"><g v="femn"/><g v="sing"/><g v="accs"/></f><f t="вельботной"><g v="femn"/><g v="sing"/><g v="ablt"/></f><f t="вельботною"><g v="femn"/><g v="sing"/><g v="ablt"/><g v="V-oy"/></f><f t="вельботной"><g v="femn"/><g v="sing"/><g v="loct"/></f><f t="вельботное"><g v="neut"/><g v="sing"/><g v="nomn"/></f><f t="вельботного"><g v="neut"/><g v="sing"/><g v="gent"/></f><f t="вельботному"><g v="neut"/><g v="sing"/><g v="datv"/></f><f t="вельботное"><g v="neut"/><g v="sing"/><g v="accs"/></f><f t="вельботным"><g v="neut"/><g v="sing"/><g v="ablt"/></f><f t="вельботном"><g v="neut"/><g v="sing"/><g v="loct"/></f><f t="вельботные"><g v="plur"/><g v="nomn"/></f><f t="вельботных"><g v="plur"/><g v="gent"/></f><f t="вельботным"><g v="plur"/><g v="datv"/></f><f t="вельботных"><g v="anim"/><g v="plur"/><g v="accs"/></f><f t="вельботные"><g v="inan"/><g v="plur"/><g v="accs"/></f><f t="вельботными"><g v="plur"/><g v="ablt"/></f><f t="вельботных"><g v="plur"/><g v="loct"/></f></lemma>
,<lemma id="40810" rev="40810"><l t="вельвет"><g v="NOUN"/><g v="inan"/><g v="masc"/></l><f t="вельвет"><g v="sing"/><g v="nomn"/></f><f t="вельвета"><g v="sing"/><g v="gen1"/></f><f t="вельвету"><g v="sing"/><g v="gen2"/></f><f t="вельвету"><g v="sing"/><g v="datv"/></f><f t="вельвет"><g v="sing"/><g v="accs"/></f><f t="вельветом"><g v="sing"/><g v="ablt"/></f><f t="вельвете"><g v="sing"/><g v="loct"/></f><f t="вельветы"><g v="plur"/><g v="nomn"/></f><f t="вельветов"><g v="plur"/><g v="gent"/></f><f t="вельветам"><g v="plur"/><g v="datv"/></f><f t="вельветы"><g v="plur"/><g v="accs"/></f><f t="вельветами"><g v="plur"/><g v="ablt"/></f><f t="вельветах"><g v="plur"/><g v="loct"/></f></lemma>
,<lemma id="40811" rev="40811"><l t="вельветин"><g v="NOUN"/><g v="inan"/><g v="masc"/></l><f t="вельветин"><g v="sing"/><g v="nomn"/></f><f t="вельветина"><g v="sing"/><g v="gent"/></f><f t="вельветину"><g v="sing"/><g v="datv"/></f><f t="вельветин"><g v="sing"/><g v="accs"/></f><f t="вельветином"><g v="sing"/><g v="ablt"/></f><f t="вельветине"><g v="sing"/><g v="loct"/></f><f t="вельветины"><g v="plur"/><g v="nomn"/></f><f t="вельветинов"><g v="plur"/><g v="gent"/></f><f t="вельветинам"><g v="plur"/><g v="datv"/></f><f t="вельветины"><g v="plur"/><g v="accs"/></f><f t="вельветинами"><g v="plur"/><g v="ablt"/></f><f t="вельветинах"><g v="plur"/><g v="loct"/></f></lemma>
,<lemma id="40812" rev="40812"><l t="вельветовый"><g v="ADJF"/></l><f t="вельветовый"><g v="masc"/><g v="sing"/><g v="nomn"/></f><f t="вельветового"><g v="masc"/><g v="sing"/><g v="gent"/></f><f t="вельветовому"><g v="masc"/><g v="sing"/><g v="datv"/></f><f t="вельветового"><g v="anim"/><g v="masc"/><g v="sing"/><g v="accs"/></f><f t="вельветовый"><g v="inan"/><g v="masc"/><g v="sing"/><g v="accs"/></f><f t="вельветовым"><g v="masc"/><g v="sing"/><g v="ablt"/></f><f t="вельветовом"><g v="masc"/><g v="sing"/><g v="loct"/></f><f t="вельветовая"><g v="femn"/><g v="sing"/><g v="nomn"/></f><f t="вельветовой"><g v="femn"/><g v="sing"/><g v="gent"/></f><f t="вельветовой"><g v="femn"/><g v="sing"/><g v="datv"/></f><f t="вельветовую"><g v="femn"/><g v="sing"/><g v="accs"/></f><f t="вельветовой"><g v="femn"/><g v="sing"/><g v="ablt"/></f><f t="вельветовою"><g v="femn"/><g v="sing"/><g v="ablt"/><g v="V-oy"/></f><f t="вельветовой"><g v="femn"/><g v="sing"/><g v="loct"/></f><f t="вельветовое"><g v="neut"/><g v="sing"/><g v="nomn"/></f><f t="вельветового"><g v="neut"/><g v="sing"/><g v="gent"/></f><f t="вельветовому"><g v="neut"/><g v="sing"/><g v="datv"/></f><f t="вельветовое"><g v="neut"/><g v="sing"/><g v="accs"/></f><f t="вельветовым"><g v="neut"/><g v="sing"/><g v="ablt"/></f><f t="вельветовом"><g v="neut"/><g v="sing"/><g v="loct"/></f><f t="вельветовые"><g v="plur"/><g v="nomn"/></f><f t="вельветовых"><g v="plur"/><g v="gent"/></f><f t="вельветовым"><g v="plur"/><g v="datv"/></f><f t="вельветовых"><g v="anim"/><g v="plur"/><g v="accs"/></f><f t="вельветовые"><g v="inan"/><g v="plur"/><g v="accs"/></f><f t="вельветовыми"><g v="plur"/><g v="ablt"/></f><f t="вельветовых"><g v="plur"/><g v="loct"/></f></lemma>
,<lemma id="40813" rev="40813"><l t="вельветов"><g v="ADJS"/></l><f t="вельветов"><g v="masc"/><g v="sing"/></f><f t="вельветова"><g v="femn"/><g v="sing"/></f><f t="вельветово"><g v="neut"/><g v="sing"/></f><f t="вельветовы"><g v="plur"/></f></lemma>
,<lemma id="40814" rev="40814"><l t="вельветовее"><g v="COMP"/></l><f t="вельветовее"></f><f t="вельветовей"><g v="V-ej"/></f><f t="повельветовее"><g v="Cmp2"/></f><f t="повельветовей"><g v="Cmp2"/><g v="V-ej"/></f></lemma>
,<lemma id="40815" rev="40815"><l t="вельветон"><g v="NOUN"/><g v="inan"/><g v="masc"/></l><f t="вельветон"><g v="sing"/><g v="nomn"/></f><f t="вельветона"><g v="sing"/><g v="gent"/></f><f t="вельветону"><g v="sing"/><g v="datv"/></f><f t="вельветон"><g v="sing"/><g v="accs"/></f><f t="вельветоном"><g v="sing"/><g v="ablt"/></f><f t="вельветоне"><g v="sing"/><g v="loct"/></f><f t="вельветоны"><g v="plur"/><g v="nomn"/></f><f t="вельветонов"><g v="plur"/><g v="gent"/></f><f t="вельветонам"><g v="plur"/><g v="datv"/></f><f t="вельветоны"><g v="plur"/><g v="accs"/></f><f t="вельветонами"><g v="plur"/><g v="ablt"/></f><f t="вельветонах"><g v="plur"/><g v="loct"/></f></lemma>
также на вход подается переменная типа string, например "\"велотренажер\""
программа должна найти слово в одной или нескольких строках массива и на выход дать массив строк, в которых содержится это слово



using System;

class Program
{
    static void Main()
    {
        string str1 = "\"велотренажер\"";
        string str2 = " <\"велотренажёр\"> ";

        bool contains = ContainsWithYoEqualE(str2, str1);
        Console.WriteLine(contains);  // Выведет True
    }

    static bool ContainsWithYoEqualE(string source, string toCheck)
    {
        if (string.IsNullOrEmpty(toCheck))
            return true;
        if (string.IsNullOrEmpty(source))
            return false;

        int sourceLength = source.Length;
        int toCheckLength = toCheck.Length;

        for (int i = 0; i <= sourceLength - toCheckLength; i++)
        {
            if (IsSubstringAtPosition(source, toCheck, i))
                return true;
        }

        return false;
    }

    static bool IsSubstringAtPosition(string source, string toCheck, int position)
    {
        for (int j = 0; j < toCheck.Length; j++)
        {
            if (!CharsEqualWithYoE(source[position + j], toCheck[j]))
                return false;
        }
        return true;
    }

    static bool CharsEqualWithYoE(char a, char b)
    {
        // Считаем 'е' и 'ё' равными, учитывая и заглавные буквы
        if (a == b)
            return true;

        if (IsYoOrE(a) && IsYoOrE(b))
            return true;

        return false;
    }

    static bool IsYoOrE(char c)
    {
        return c == 'е' || c == 'ё' || c == 'Е' || c == 'Ё';
    }
}



напиши код на c# по следующему условию:
имееится две строки, например:
string str1 = "\"велотренажер\"";
string str2 = " <\"велотренажёр\"> ";
нужно чтобы строка 1 была найдена, то есть содержалась в строке 2
это только примеры, нельзя удалять какие либо символы в строке 2, нельзя заменять буквы, необходимо настроить поиск вида Contain с настройкой равенства букв "е" и "ё"

string word = "велотренажер";
string[] strSearch = fileContent
    .Where(s => s.IndexOf(word, StringComparison.CurrentCultureIgnoreCase) >= 0)
    .ToArray();


почему при word="велотренажер"
программа
string[] strSearch = fileContent.Where(s => s.Contains("\"" + word + "\"", StringComparison.CurrentCultureIgnoreCase)).ToArray();
не находит слово в подстроке строки массива, хотя оно там есть



напиши функцию на ЯП C# по следующему условию:
на вход подаётся текстовый файл, путь которого "input.txt"
функция считывает его построчно, после чего обрезает все символы, следующее после символа "\"
на выход программа даёт массив строк



using System;
using System.IO;

class Program
{
    static string[] ProcessFile(string filePath)
    {
        var lines = File.ReadAllLines(filePath);
        for (int i = 0; i < lines.Length; i++)
        {
            int index = lines[i].IndexOf('\\');
            if (index >= 0)
            {
                lines[i] = lines[i].Substring(0, index);
            }
        }
        return lines;
    }

    static void Main()
    {
        string[] result = ProcessFile("input.txt");
        foreach (var line in result)
        {
            Console.WriteLine(line);
        }
    }
}




string[] testData = ProcessFile("input.txt");
        float countNotDictionary = 0;
        float countWords = 0;
        for (int test = 0; test < testData.Length; test++)
        {
            string inputString = testData[test];
            inputString = inputString.ToLower();
            inputString = inputString.Replace("-", " ");
            inputString = inputString.Replace("(", " ");
            inputString = inputString.Replace(")", " ");
            inputString = inputString.Replace("|", "");
            string[] inputMaterials = inputString.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries); //Разделяем строку в массив по пробелам
            string[] lemmas;
            List<Word> words = new List<Word>();
            for (int i = 0; i < inputMaterials.Length; i++)
            {
                lemmas = SearchInDictionary(inputMaterials[i]).Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
                for (int j = 0; j < lemmas.Length; j++)
                {
                    string[] list = lemmas[j].Split(new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries);
                    //Указанные ниже буквы нужно исключить ввиду засорения вывода программы, из-за наличия огромного количества их одинаковых форм. Такие символы обычно встечаются в формате сокращений с цифрами. Например: 2-ух, 2-х, 8-ми, 9-ти
                    if (list.Length >= 6 && list[1] != "х" && list[1] != "ми" && list[1] != "ти" && list[1] != "ух")
                    {
                        words.Add(new Word(list[0], i, list[1], list[2], list[3], list[4], list[5], list[6]));
                        countWords++;
                    }
                    else
                    {
                        //Если не нужна обработка ошибок
                        words.Add(new Word("999999" + i, i, inputMaterials[i], "0000", "0000", "0000", "0000", "0000"));
                        countNotDictionary++;
                        countWords++;
                        break;
                    }
                }
           }
        }
        Console.WriteLine(countNotDictionary/countWords);
