using System.Xml.Linq;
using System.Text.RegularExpressions;

class Lemmatizer
{
    static void Main()
    {
        Console.WriteLine("Введите название материала: ");
        string inputString = Console.ReadLine();
        inputString= inputString.ToLower();
        //Убираем все точки и запятые
        inputString = inputString.Replace("|", "");
        string[] inputMaterials = inputString.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries); //Разделяем строку в массив по пробелам
        string[] lemmas=[];
        List<Word> words = new List<Word>();
        for (int i = 0; i < inputMaterials.Length; i++)
        {
            lemmas = SearchInDictionary(inputMaterials[i]).Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries);
            for (int j = 0; j < lemmas.Length; j++)
            {
                string[] list = lemmas[j].Split(new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries);
                words.Add(new Word(i, list[0], list[1], list[2], list[3], list[4], list[5]));
            }
        }
        
        PrintWords(words);
    }

    static string SearchInDictionary(string word)
    {
        word = word.ToLower();
        string[] dictionaryNumbers = ["", "ёаб", "бв", "вг", "гдежз", "зи", "ийкл", "лмн", "но", "о", "оп", "п", "пр", "рс", "с", "сту", "уфх", "хцчшщэюя"];
        string dictionaryNumber = "";
        for (int i = 0; i < dictionaryNumbers.Length; i++)
        {
            if (dictionaryNumbers[i].Contains(word[0]))
            {
                dictionaryNumber += "-";
                dictionaryNumber += i;
            }
        }
        dictionaryNumber += "-17";
        string[] foundDictionaries = dictionaryNumber.Split(new char[] { '-' }, StringSplitOptions.RemoveEmptyEntries);
        string lemmas = "";
        string filePath = "";
        for (int i = 0; i < foundDictionaries.Length; i++)
        {
            filePath = "lemmas" + foundDictionaries[i] + ".txt";
            string[] fileContent = ReadFileToLines(filePath);
            string[] strSearch = FindAllContainingWord(fileContent, word);
            for (int j = 0; j < strSearch.Length; j++)
            {
                lemmas += ParseLemma(word, strSearch[j])+" ";
            }
            Console.WriteLine(lemmas);
            return lemmas;
        }

        return "не найдено";
    }
    public bool IsRussian(string input)
    {
        if (string.IsNullOrEmpty(input))
            return false;

        foreach (char c in input)
        {
            // Проверяем, является ли символ русской буквой (диапазон Unicode для русского алфавита)
            // или пробелом, или распространённым знаком препинания
            if (!(c >= 'А' && c <= 'я' || c == 'ё' || c == 'Ё' || 
                c == ' ' || c == ',' || c == '.' || c == '!' || 
                c == '?' || c == '-' || c == ':' || c == ';'))
            {
                return false;
            }
        }
        return true;
    }

    

    static string[] ReadFileToLines(string path)
    {
        // Проверяем, существует ли файл
        if (!File.Exists(path))
            throw new FileNotFoundException($"Файл не найден: {path}");

        // Считываем все строки из файла в массив
        return File.ReadAllLines(path);
    }

    static string[] FindAllContainingWord(string[] array, string word)
    {
        return array.Where(s => s.Contains("\"" + word + "\"")).ToArray();
    }
    
    
    public static void PrintWords(List<Word> words)
    {
        foreach (var w in words.OrderBy(w => w.wordOrder))
        {
            Console.WriteLine($"wordOrder: {w.wordOrder}, wordText: {w.wordText}, partOfSpeech: {w.partOfSpeech}, wordCase: {w.wordCase}, animation: {w.animation} wordKind: {w.wordKind}, singPlur: {w.singPlur}");
        }
    }
    public static List<string> ParseLemma(string inputWord, string lemmaXml)
    {
        var result = new List<string>();

        // Извлекаем все формы слова из XML
        var forms = Regex.Matches(lemmaXml, @"<f t=""([^""]+)"">(.*?)</f>");
        
        foreach (Match form in forms)
        {
            string formWord = form.Groups[1].Value;
            if (formWord == inputWord)
            {
                // Извлекаем теги для данной формы
                var tags = Regex.Matches(form.Groups[2].Value, @"<g v=""([^""]+)""");
                var tagList = tags.Cast<Match>().Select(t => t.Groups[1].Value).ToList();
                
                // Извлекаем основной тег части речи из lemma
                string posTag = Regex.Match(lemmaXml, @"<l t=""[^""]+"">(.*?)</l>").Groups[1].Value;
                posTag = Regex.Matches(posTag, @"<g v=""([^""]+)""").Cast<Match>()
                    .Select(t => t.Groups[1].Value)
                    .FirstOrDefault(t => t == "NOUN" || t == "ADJF") ?? "0000";

                // Формируем базовую строку
                string baseResult = $"{inputWord}-{posTag}";

                // Добавляем грамматические теги
                string caseTag = tagList.FirstOrDefault(t => new[] { "nomn", "gent", "datv", "accs", "ablt", "loct" }.Contains(t)) ?? "0000";
                baseResult += $"-{caseTag}";

                // Добавляем anim/inan
                string animTag = tagList.Contains("anim") ? "anim" : tagList.Contains("inan") ? "inan" : "0000";
                baseResult += $"-{animTag}";

                // Добавляем род
                string genderTag = tagList.FirstOrDefault(t => new[] { "masc", "femn", "neut" }.Contains(t)) ?? "0000";
                baseResult += $"-{genderTag}";

                // Добавляем число
                string numberTag = tagList.FirstOrDefault(t => new[] { "sing", "plur" }.Contains(t)) ?? "0000";
                baseResult += $"-{numberTag}";

                result.Add(baseResult);
            }
        }

        return result;
    }
    
    
}

class Word
{
    public int wordOrder;
    public string wordText;
    public string partOfSpeech;
    public string wordCase;
    public string animation;
    public string wordKind;
    public string singPlur;

    public Word(int WordOrder, string WordText, string PartOfSpeech, string WordCase, string Animation, string WordKind, string SingPlur)
    {
        wordOrder = WordOrder;
        wordText = WordText;
        partOfSpeech = PartOfSpeech;
        wordKind = WordKind;
        singPlur = SingPlur;
        wordCase = WordCase;
        animation = Animation;
        
    }
}



напиши функцию на ЯП c# по следующему условию:
на вход подается массив типа string и подаются объекты класса Word вида List<Word> words = new List<Word>() с полями 
public int wordOrder;
public string wordText;
public string partOfSpeech;
public string wordCase;
public string animation;
public string wordKind;
public string singPlur;
программа печатает в файл "output.txt" следующее:
при входе 
wordOrder: 0, wordText: компрессионный, partOfSpeech: ADJF, wordCase: gent, animation: 0000 wordKind: masc, singPlur: sing
wordOrder: 1, wordText: мешок, partOfSpeech: NOUN, wordCase: gent, animation: anim wordKind: masc, singPlur: sing
wordOrder: 1, wordText: мешок, partOfSpeech: NOUN, wordCase: gent, animation: inan wordKind: masc, singPlur: sing
на выход идёт:

напиши функцию на ЯП c# по следующему условию:
на вход подаётся строка вида "мешки", строка вида <lemma id="159552" rev="159552"><l t="мешок"><g v="NOUN"/><g v="anim"/><g v="masc"/></l><f t="мешок"><g v="sing"/><g v="nomn"/></f><f t="мешка"><g v="sing"/><g v="gent"/></f><f t="мешку"><g v="sing"/><g v="datv"/></f><f t="мешка"><g v="sing"/><g v="accs"/></f><f t="мешком"><g v="sing"/><g v="ablt"/></f><f t="мешке"><g v="sing"/><g v="loct"/></f><f t="мешки"><g v="plur"/><g v="nomn"/></f><f t="мешков"><g v="plur"/><g v="gent"/></f><f t="мешкам"><g v="plur"/><g v="datv"/></f><f t="мешков"><g v="plur"/><g v="accs"/></f><f t="мешками"><g v="plur"/><g v="ablt"/></f><f t="мешках"><g v="plur"/><g v="loct"/></f></lemma>
на выходе должно быть получено: 
мешки-NOUN-nomn-anim-masc-plur
на вход подаётся "компрессионного" <lemma id="137363" rev="137363"><l t="компрессионный"><g v="ADJF"/></l><f t="компрессионный"><g v="masc"/><g v="sing"/><g v="nomn"/></f><f t="компрессионного"><g v="masc"/><g v="sing"/><g v="gent"/></f><f t="компрессионному"><g v="masc"/><g v="sing"/><g v="datv"/></f><f t="компрессионного"><g v="anim"/><g v="masc"/><g v="sing"/><g v="accs"/></f><f t="компрессионный"><g v="inan"/><g v="masc"/><g v="sing"/><g v="accs"/></f><f t="компрессионным"><g v="masc"/><g v="sing"/><g v="ablt"/></f><f t="компрессионном"><g v="masc"/><g v="sing"/><g v="loct"/></f><f t="компрессионная"><g v="femn"/><g v="sing"/><g v="nomn"/></f><f t="компрессионной"><g v="femn"/><g v="sing"/><g v="gent"/></f><f t="компрессионной"><g v="femn"/><g v="sing"/><g v="datv"/></f><f t="компрессионную"><g v="femn"/><g v="sing"/><g v="accs"/></f><f t="компрессионной"><g v="femn"/><g v="sing"/><g v="ablt"/></f><f t="компрессионною"><g v="femn"/><g v="sing"/><g v="ablt"/><g v="V-oy"/></f><f t="компрессионной"><g v="femn"/><g v="sing"/><g v="loct"/></f><f t="компрессионное"><g v="neut"/><g v="sing"/><g v="nomn"/></f><f t="компрессионного"><g v="neut"/><g v="sing"/><g v="gent"/></f><f t="компрессионному"><g v="neut"/><g v="sing"/><g v="datv"/></f><f t="компрессионное"><g v="neut"/><g v="sing"/><g v="accs"/></f><f t="компрессионным"><g v="neut"/><g v="sing"/><g v="ablt"/></f><f t="компрессионном"><g v="neut"/><g v="sing"/><g v="loct"/></f><f t="компрессионные"><g v="plur"/><g v="nomn"/></f><f t="компрессионных"><g v="plur"/><g v="gent"/></f><f t="компрессионным"><g v="plur"/><g v="datv"/></f><f t="компрессионных"><g v="anim"/><g v="plur"/><g v="accs"/></f><f t="компрессионные"><g v="inan"/><g v="plur"/><g v="accs"/></f><f t="компрессионными"><g v="plur"/><g v="ablt"/></f><f t="компрессионных"><g v="plur"/><g v="loct"/></f></lemma>
на выход: компрессионного-ADJF-gent-0000-masc-sing
компрессионного-ADJF-gent-0000-masc-sing
компрессионного-ADJF-accs-inan-masc-sing
компрессионного-ADJF-gent-0000-neut-sing
