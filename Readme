напиши функцию на ЯП c# по следующему условию:
программа считывает все объекты класса Word с параметрами:
public int wordOrder;
public string wordText;
public string wordId;
public string partOfSpeech;
public string wordKind;
public string wordCase;
типичным объектом будет, например "0, кошка, 1000, NOUN, femn, nomn"
Тебе нужно изменить параметры объектов по следующей логике:
Если параметр объекта partOfSpeech=ADJF, то ничего не делать
Если параметр одного объекта partOfSpeech=NOUN и нет объекта где (wordText="для" или "от" или "из" или "к" или "с" или "в" или "на" или "под" или "через")
то:{
    если нет других объектов с параметром partOfSpeech=NOUN 
    то:{
        изменить (параметры wordKind и wordCase на равные аналогичным у объекта с параметром NOUN) у всех объектов, где параметр partOfSpeech=ADJF 
        }
    иначе:
        {
        Если нет объектов с параметром ADJF:
        то:
            {
                если не (объект с параметром wordOrder==0 имеет параметр wordText= "набор" или "комплект" или "каталог" или "блок")
                то:{
                    изменить параметры wordCase всех объектов, кроме объекта с параметром wordOrder==0, на wordCase="gent"
                    }
                иначе:
                    {
                    
                    }
            }
        }
}



дополни программу:
теперь она должна аналогично выводить признаки sing/plur 




using System;
using System.Linq;
using System.Xml.Linq;

public class Program
{
    public static void Main()
    {
        string input = @"<lemma id=""96662"" rev=""96662""><l t=""жена""><g v=""NOUN""/><g v=""anim""/><g v=""femn""/></l><f t=""жена""><g v=""sing""/><g v=""nomn""/></f><f t=""жены""><g v=""sing""/><g v=""gent""/></f></lemma>";
        
        string result = LemmaPropertySearch(input);
        Console.WriteLine(result);  // Ожидается: 96662-NOUN-femn-sing-nomn
    }

    public static string LemmaPropertySearch(string lemmaXml)
    {
        try
        {
            var xdoc = XDocument.Parse(lemmaXml);
            var lemma = xdoc.Element("lemma");
            if (lemma == null)
                return null;

            string id = lemma.Attribute("id")?.Value ?? "0000";

            var l = lemma.Element("l");
            if (l == null)
                return null;

            // Часть речи — первый <g v="..."/> внутри <l>
            string pos = l.Elements("g").FirstOrDefault()?.Attribute("v")?.Value ?? "0000";

            // Род из <l> — masc, femn, neut
            string genderFromL = l.Elements("g")
                .Select(g => g.Attribute("v")?.Value)
                .FirstOrDefault(v => v == "masc" || v == "femn" || v == "neut") ?? "0000";

            // Берём первый <f> — первую форму
            var firstF = lemma.Elements("f").FirstOrDefault();
            if (firstF == null)
                return $"{id}-{pos}-{genderFromL}-0000-0000";

            var gValuesF = firstF.Elements("g").Select(g => g.Attribute("v")?.Value).ToList();

            // Род из <f>, если есть, иначе из <l>
            string gender = gValuesF.FirstOrDefault(v => v == "masc" || v == "femn" || v == "neut") ?? genderFromL;

            // Падеж — nomn, gent, datv, accs, ablt, loct
            string[] cases = { "nomn", "gent", "datv", "accs", "ablt", "loct" };
            string caseVal = gValuesF.FirstOrDefault(v => cases.Contains(v)) ?? "0000";

            // Число — sing или plur
            string number = gValuesF.FirstOrDefault(v => v == "sing" || v == "plur") ?? "0000";

            return $"{id}-{pos}-{gender}-{number}-{caseVal}";
        }
        catch
        {
            return null;
        }
    }
}
